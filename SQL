_______________________________________________________
Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
SELECT * FROM CITY
WHERE COUNTRYCODE like 'USA' and POPULATION > 100000;
_____________________________________________________
Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
SELECT NAME FROM CITY
WHERE COUNTRYCODE like 'usa' and POPULATION > 120000;
______________________________________________________
Query all columns (attributes) for every row in the CITY table.
SELECT * FROM CITY;
_____________________________________________________
Query all columns for a city in CITY with the ID 1661.
SELECT * FROM CITY
WHERE ID = 1661;
______________________________________________________
Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
SELECT * FROM CITY
WHERE COUNTRYCODE like 'JPN';
_______________________________________________________
Query a list of CITY and STATE from the STATION table.
SELECT city, state FROM STATION;
________________________________________________________
Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
SELECT distinct(city) FROM station where ID % 2 = 0;
_________________________________________________________
Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
SELECT count(CITY) - count(distinct(city)) FROM STATION;

_________________________________________________________
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

SET @v1 := (SELECT (city) FROM STATION
    WHERE (city) like 'a%'
    ORDER BY length(city) ASC LIMIT 0,1);
    
SET @v2 := (SELECT (city) FROM STATION
    ORDER BY length(city) DESC LIMIT 0,1);
    
SELECT @v1, length(@v1);
SELECT @v2, length(@v2);
__________________________________________________
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(CITY, '^[aeiou].*[aeiou]', 'i');
________________________________________________________
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
SELECT DISTINCT (city)
FROM STATION
WHERE
(   (city) LIKE "a%"
 or (city) LIKE "e%"
 or (city) LIKE "i%"
 or (city) LIKE "o%"
 or (city) LIKE "u%"
)
 AND
 (
    (city) LIKE "%a"
 or (city) LIKE "%e"
 or (city) LIKE "%i"
 or (city) LIKE "%o"
 or (city) LIKE "%u"
 );
 ________________________________________________________________
 Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SELECT DISTINCT (city)
FROM STATION
WHERE city NOT RLIKE '^[aeiouAEIOU].*$'

___________________________________________________________________
Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT city FROM STATION
WHERE LOWER(SUBSTRING(city, -1, 1)) NOT IN ('a', 'e', 'i', 'o', 'u');
______________________________________________________________________
Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT city FROM station WHERE city RLIKE '^[^aeiouAEIOU].*|.*[^AEIOUaeiou]$';
___________________________________________________________________________
Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT city FROM STATION
WHERE LOWER(SUBSTRING(city, 1, 1)) NOT IN ('a', 'e', 'i', 'o', 'u')
AND LOWER(SUBSTRING(city, -1, 1)) NOT IN ('a', 'e', 'i', 'o', 'u')
_____________________________________________________________________________
Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name.
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
SELECT NAME FROM STUDENTS WHERE Marks > 75 ORDER BY RIGHT(NAME, 3), ID ASC
__________________________________________________________________________________
Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
Input Format

SELECT 
CASE
WHEN A+B<=C OR A+C<=B OR B+C<=A THEN 'Not A Triangle'
WHEN A=B AND B=C THEN 'Equilateral'
WHEN A=B OR A=C OR B=C THEN 'Isosceles'
WHEN A<>B AND B<>C THEN 'Scalene'
   END tuple
FROM TRIANGLES;
____________________________________________________________________________________
Query the average population for all cities in CITY, rounded down to the nearest integer.
SELECT FLOOR(AVG(population)) FROM CITY
WHERE name = name;

______________________________________________________________________________________
Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
SELECT sum(population) FROM CITY
WHERE COUNTRYCODE like 'JPN';
_________________________________________________________________________________________
Query the difference between the maximum and minimum populations in CITY.
SELECT ABS(MAX(population) - MIN(population)) AS spread 
FROM city 
ORDER BY spread DES
_____________________________________________________________________________________________
Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  
key was broken until after completing the calculation. 
She wants your help finding the difference between her miscalculation (using salaries with any zeroes removed), and the actual average salary.
Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.

SELECT CEILING((AVG((ABS(salary - replace(salary, '0', '')))))) FROM EMPLOYEES
_______________________________________________________________________________________________
We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. 
Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. 
Then print these values as  space-separated integers.

SELECT MAX(salary * months), COUNT(*) c  from Employee GROUP BY salary HAVING c > 6;
__________________________________________________________________________________________________________
Query the following two values from the STATION table:
The sum of all values in LAT_N rounded to a scale of  decimal places.
The sum of all values in LONG_W rounded to a scale of  decimal places.

SELECT @first := ROUND(SUM(LAT_N), 2), @second := ROUND(SUM(LONG_W), 2) FROM STATION;
